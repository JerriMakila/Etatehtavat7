/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-11-30 21:22:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class lisaaasiakas_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<script src=\"scripts/main.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("<title>Asiakkaan lisäys</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form id=\"tiedot\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<thead>\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th colspan=\"5\" id=\"takaisin\"><a href=\"listaaasiakkaat.jsp\" class=\"siirto\"><span class=\"left-arrow\"></span>Takaisin listaukseen</a></th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th colspan=\"5\" id=\"ohje\">Syötä uuden asiakkaan tiedot</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>Etunimi</th>\r\n");
      out.write("\t\t\t\t<th>Sukunimi</th>\r\n");
      out.write("\t\t\t\t<th>Puhelinnumero</th>\r\n");
      out.write("\t\t\t\t<th>Sähköposti</th>\r\n");
      out.write("\t\t\t\t<th></th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td class=\"data-input\"><input type=\"text\" name=\"etunimi\" id=\"etunimi\"></td>\r\n");
      out.write("\t\t\t\t<td class=\"data-input\"><input type=\"text\" name=\"sukunimi\" id=\"sukunimi\"></td>\r\n");
      out.write("\t\t\t\t<td class=\"data-input\"><input type=\"text\" name=\"puhelin\" id=\"puhelin\"></td>\r\n");
      out.write("\t\t\t\t<td class=\"data-input\"><input type=\"text\" name=\"sposti\" id=\"sposti\"></td> \r\n");
      out.write("\t\t\t\t<td class=\"data-input\"><input type=\"button\" id=\"tallenna\" value=\"Lisää\" onclick=\"lisaaTiedot()\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("</form>\r\n");
      out.write("<div id=\"ilmo\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\t\t\r\n");
      out.write("var tekstikentat = document.querySelectorAll(\".data-input\");\r\n");
      out.write("\r\n");
      out.write("for(i=0; i<tekstikentat.length; i++){\r\n");
      out.write("\ttekstikentat[i].addEventListener(\"keypress\", function(event){\r\n");
      out.write("\t\tif (event.keyCode === 13) {\r\n");
      out.write("\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t    document.getElementById(\"tallenna\").click();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function lisaaTiedot(){\t\r\n");
      out.write("\tif(tarkastaKentat()){\r\n");
      out.write("\t\tdocument.getElementById(\"etunimi\").value = document.getElementById(\"etunimi\").value.trim();\r\n");
      out.write("\t\tdocument.getElementById(\"sukunimi\").value = document.getElementById(\"sukunimi\").value.trim();\r\n");
      out.write("\t\tdocument.getElementById(\"puhelin\").value = document.getElementById(\"puhelin\").value.trim();\r\n");
      out.write("\t\tdocument.getElementById(\"sposti\").value = document.getElementById(\"sposti\").value.trim();\r\n");
      out.write("\t\tvar formJsonStr = formDataToJSON(document.getElementById(\"tiedot\"));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfetch(\"asiakkaat\",{\r\n");
      out.write("\t\t      method: 'POST',\r\n");
      out.write("\t\t      body:formJsonStr\r\n");
      out.write("\t\t    })\r\n");
      out.write("\t\t.then( function (response) {\r\n");
      out.write("\t\t\treturn response.json()\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t.then( function (responseJson) {\r\n");
      out.write("\t\t\tvar vastaus = responseJson.response;\t\t\r\n");
      out.write("\t\t\tif(vastaus==0){\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"ilmo\").innerHTML= \"Asiakkaan lisääminen epäonnistui\";\r\n");
      out.write("\t      \t}else if(vastaus==1){\t        \t\r\n");
      out.write("\t      \t\tdocument.getElementById(\"ilmo\").innerHTML= \"Asiakkaan lisääminen onnistui\";\t\t\t      \t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\t\r\n");
      out.write("\t\tdocument.getElementById(\"tiedot\").reset();\r\n");
      out.write("\t}\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function tarkastaKentat(){\r\n");
      out.write("\tdocument.getElementById(\"ilmo\").innerHTML = \"\";\r\n");
      out.write("\tvar paluuArvo = true;\r\n");
      out.write("\tvar nimiPattern = /^[a-zåäöA-ZÅÄÖ]{1,50}$/;\r\n");
      out.write("\tvar puhelinPattern = /^[+]?[0-9]{2,3}[-]?[0-9]{7,9}$/;\r\n");
      out.write("\tvar spostiPattern = /^[a-zA-Z]{1,}[\\.]{0,1}[a-zA-Z]{0,}[@]{1}[a-zA-Z]{1,}[\\.]{1}[a-zA-Z]{1,}$/;\r\n");
      out.write("\tvar ilmo;\r\n");
      out.write("\t\r\n");
      out.write("\tif(!nimiPattern.test(document.getElementById(\"etunimi\").value)){\r\n");
      out.write("\t\tif(document.getElementById(\"etunimi\").value.length > 50){\r\n");
      out.write("\t\t\tilmo = \"Nimen enimmäispituus on 50 merkkiä\";\r\n");
      out.write("\t\t} else if(document.getElementById(\"etunimi\").value.trim() == \"\"){\r\n");
      out.write("\t\t\tilmo = \"Etunimi on pakollinen tieto\";\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tilmo = \"Nimi voi sisältää vain kirjaimia a-ö\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML += \"<div>\" + ilmo + \"</div>\";\r\n");
      out.write("\t\tpaluuarvo = false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(!nimiPattern.test(document.getElementById(\"sukunimi\").value)){\r\n");
      out.write("\t\tif(document.getElementById(\"sukunimi\").value.length > 50){\r\n");
      out.write("\t\t\tilmo = \"Nimen enimmäispituus on 50 merkkiä\";\r\n");
      out.write("\t\t} else if(document.getElementById(\"etunimi\").value.trim() == \"\"){\r\n");
      out.write("\t\t\tilmo = \"Sukunimi on pakollinen tieto\";\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tilmo = \"Nimi voi sisältää vain kirjaimia a-ö\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML += \"<div>\" + ilmo + \"</div>\";\r\n");
      out.write("\t\tpaluuArvo = false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(!puhelinPattern.test(document.getElementById(\"puhelin\").value)){\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML += \"<div>Anna kelvollinen puhelinnumero</div>\";\r\n");
      out.write("\t\tpaluuArvo = false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(!spostiPattern.test(document.getElementById(\"sposti\").value)){\r\n");
      out.write("\t\tif(document.getElementById(\"sposti\").value.length > 100){\r\n");
      out.write("\t\t\tilmo = \"Sähköpostin enimmäispituus on 100 merkkiä!\"\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tilmo = \"Anna kelvollinen sähköpostiosoite muodossa \\\"esim@esim.fi\\\"\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML += \"<div>\" + ilmo + \"</div>\";\r\n");
      out.write("\t\tpaluuArvo = false;\t\r\n");
      out.write("\t} else if(document.getElementById(\"sposti\").value.length > 100){\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML += \"<div>Sähköposti voi olla maksimissaan 100 merkkiä pitkä</div>\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\treturn paluuArvo;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
